<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginsfSympalBlogPostTable extends Doctrine_Table
{
  public function retrieveLatestPosts($num)
  {
    $q = Doctrine::getTable('sfSympalContent')
      ->getTypeQuery('sfSympalBlogPost')
      ->orderBy('c.date_published DESC')
      ->limit($num);

    return $q->execute();
  }

  public function retrieveTopAuthors($num)
  {
    $userTable = Doctrine::getTable('sfGuardUser');
    $q = $userTable
      ->createQuery('u')
      ->select('*, count(uc.id) as num_posts')
      ->innerJoin('u.CreatedContent uc')
      ->innerJoin('uc.Type t WITH t.name = ?', 'sfSympalBlogPost')
      ->groupBy(implode(', ', $userTable->getFieldNames())) 
      ->limit($num);

    return $q->execute();
  }

  /**
   * Returns an array of months in which posts were published. The array
   * takes the format:
   * array(
   *  'm/1/Y' => # of posts that month
   * );
   * 
   * @return array
   */
  public function retrieveMonths()
  {
    $now = new Doctrine_Expression('NOW()');
    $results = Doctrine_Core::getTable('sfSympalContent')
      ->getTypeQuery('sfSympalBlogPost')
      ->select('c.date_published')
      ->where('c.date_published <= '.$now)
      ->orderBy('c.date_published DESC')
      ->execute(array(), Doctrine_Core::HYDRATE_NONE);
    $months = array();
    
    foreach ($results as $result)
    {
      $month = date('m/1/Y', strtotime($result[0]));
      if (!isset($months[$month]))
      {
        $months[$month] = 1;
      }
      else
      {
        $months[$month]++;
      }
    }
    
    return $months;
  }

  public function retrieveBlogMonth($month, $year)
  {
    $start = date('Y-m-d', strtotime($month.'/01/'.$year));
    $end = date('Y-m-d', strtotime($start.' +1 month'));
    $end = date('Y-m-d', strtotime($end.' -1 day'));
    $dates = array($start, $end);

    Doctrine::getTable('sfSympalBlogPost');

    $q = Doctrine::getTable('sfSympalContent')
      ->createQuery('e')
      ->innerJoin('e.sfSympalBlogPost p')
      ->innerJoin('e.Type t2')
      ->where('e.date_published > ? AND e.date_published < ?', $dates);
    
    $pager = new sfDoctrinePager('sfSympalContent', sfSympalConfig::get('rows_per_page'));
    $pager->setQuery($q);
    $pager->init();

    return $pager;
  }
}